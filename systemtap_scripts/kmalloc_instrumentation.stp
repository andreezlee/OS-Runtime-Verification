%{
	#include <linux/kernel.h>
	#include <linux/init.h>
	#include <linux/module.h>
	#include <linux/syscalls.h>
	#include <linux/file.h>
	#include <linux/fs.h>
	#include <linux/fcntl.h>
	#include <asm/uaccess.h> 
%}

global trace[100]
global index = 0
global test_process = "kmalloc_app"

# Instrument kmalloc for only the test process
probe kernel.function("__kmalloc").return { 
	if (execname()==test_process){
		trace [index] = "kmalloc ".bytes_to_string($return)."\n"
		index ++
	}
}

# Instrument kfree for only the test process
probe kernel.function("kfree") {
	if (execname()==test_process){
		trace[index] = "kfree ".bytes_to_string($x)."\n"
		index ++
	}
}

# Instrument for the ending of the test process
# Please replace the process parameter with the path for your system
probe process("/home/andre/OS-Runtime-Verification/systemtap_scripts/kmalloc_app").end{
	trace[index] = "end"
	exit()
}

probe end {
	for (i = 0; i <= index; i ++){
		write(trace[i])
	}
}

function write:long (s:string) %{
	struct file *file;
	loff_t pos = 0;
	mm_segment_t old_fs = get_fs();
	set_fs(KERNEL_DS);
	file = filp_open("kmalloc.txt", O_WRONLY|O_CREAT|O_SYNC|O_APPEND, 0644);
	if (file) {
		vfs_write(file, STAP_ARG_s, strlen(STAP_ARG_s), &pos);
	}
	filp_close(file,NULL);
	set_fs(old_fs);
	STAP_RETURN(0);
%}
