%{
	#include <linux/kernel.h>
	#include <linux/init.h>
	#include <linux/module.h>
	#include <linux/types.h>
	#include <linux/string.h>
	#include <linux/kallsyms.h>

	typedef struct
	{
		char event[10];
		uint64_t param;
	} monitor_arg_t;

	extern void monitor_spec1(monitor_arg_t);
	extern void monitor_spec2(monitor_arg_t);
	extern void monitor_spec3(monitor_arg_t);
%}

# Instrument kmalloc for only the test process
probe kernel.function("__kmalloc").return { 
	if (execname()==@2){
		monitor_event(0, $return)
	}
}

# Instrument kfree for only the test process
probe kernel.function("kfree") {
	if (execname()==@2){
		monitor_event(1, $x)
	}
}

# Instrument for the ending of the test process
# Please replace the process parameter with the path for your system
probe process(@1).end{
	monitor_event(2, 0)
	exit_messages()
	exit()
}

# Prints out exit messages for testing
function exit_messages:long () %{
	printk("Instrumentation completed");
	printk("Exiting now");
%}

# Communicates event with online monitor
function monitor_event:long (e:long, a:long) %{
	monitor_arg_t new_event;
	char *event_name;
	switch(STAP_ARG_e){
		case 0:
			event_name = "kmalloc";
			break;
		case 1:
			event_name = "kfree";
			break;
		case 2:
			event_name = "end";
			break;
		default: break;
	}
	memcpy(&(new_event.event), event_name, 10);
	new_event.param = (uint64_t) STAP_ARG_a;
	monitor_spec1(new_event);
	monitor_spec2(new_event);
	monitor_spec3(new_event);
	STAP_RETURN(0);
%}
